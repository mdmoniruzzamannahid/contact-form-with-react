{"version":3,"sources":["components/contactForm/ContactForm.js","App.js","serviceWorker.js","index.js"],"names":["initialState","name","email","password","bio","country","gender","skills","ContactForm","state","changeHandeler","event","target","type","checked","setState","concat","value","filter","skill","submitHandler","contactDetails","preventDefault","console","log","myForm","current","reset","React","createRef","ref","this","onSubmit","className","htmlFor","placeholder","id","onChange","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9a9e0658.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\n\r\n\r\nconst initialState = {\r\n        name:'',\r\n        email:'',\r\n        password:'',\r\n        bio:'',\r\n        country:'',\r\n        gender:'',\r\n        skills:[]\r\n}\r\n\r\nclass ContactForm extends Component {\r\n\r\n    constructor(){\r\n        super()\r\n        this.myForm = React.createRef()\r\n    }\r\n\r\n    state = initialState;\r\n    changeHandeler = event => {\r\n        if(event.target.type === 'checkbox'){\r\n            if(event.target.checked){\r\n                this.setState({\r\n                    ...this.state,\r\n                    skills: this.state.skills.concat(event.target.value)\r\n                })\r\n            }else{\r\n                this.setState({\r\n                    ...this.state,\r\n                    skills: this.state.skills.filter(skill => skill !== event.target.value)\r\n                })\r\n            }\r\n        }else{\r\n            this.setState({\r\n                [event.target.name] : event.target.value\r\n            })\r\n        }\r\n    }\r\n    \r\n    submitHandler = event => {\r\n        const contactDetails = this.state\r\n        event.preventDefault()\r\n        console.log(contactDetails)\r\n\r\n        this.myForm.current.reset()\r\n        this.setState({\r\n            ...initialState\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <form ref={this.myForm} onSubmit={this.submitHandler}>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"name\"> Enter your Full Name</label>\r\n\r\n                    <input \r\n                        className=\"form-control\"\r\n                        type=\"text\" \r\n                        placeholder=\"Enter your name\" \r\n                        name=\"name\" \r\n                        id=\"name\" \r\n                        value={ this.state.name }\r\n                        onChange={this.changeHandeler}\r\n                        />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"email\"> Enter your email here</label>\r\n                    \r\n                    <input \r\n                        className=\"form-control\"\r\n                        type=\"email\" \r\n                        placeholder=\"Enter your email\" \r\n                        name=\"email\" \r\n                        id=\"email\" \r\n                        value={ this.state.email }\r\n                        onChange={this.changeHandeler}\r\n                        />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"password\"> Enter your password</label>\r\n                    \r\n                    <input \r\n                        className=\"form-control\"\r\n                        type=\"password\" \r\n                        placeholder=\"Enter your password\" \r\n                        name=\"password\" \r\n                        id=\"password\" \r\n                        value={ this.state.password }\r\n                        onChange={this.changeHandeler}\r\n                        />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"bio\"> Enter your Full bio</label>\r\n                    \r\n                    <textarea \r\n                        className=\"form-control\"\r\n                        type=\"text\" \r\n                        placeholder=\"Enter your bio\" \r\n                        name=\"bio\" \r\n                        id=\"bio\" \r\n                        value={ this.state.bio }\r\n                        onChange={this.changeHandeler}\r\n                        />\r\n                </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-6\">\r\n                            <div className=\"form-group\">\r\n                            <label htmlFor=\"country\">Select a country</label>\r\n                            <select className=\"form-control\" onChange={ this.changeHandeler } name=\"country\" id=\"country\" >\r\n                                <option value=\"Bangladesh\">Bangladesh</option>\r\n                                <option value=\"Australia\">Australia</option>\r\n                                <option value=\"England\">England</option>\r\n                                <option value=\"Germany\">Germany</option>\r\n                                <option value=\"Italy\">Italy</option>\r\n                            </select>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-sm-3\">\r\n                            <div className=\"form-group\">\r\n                                <h6>Gender -</h6>\r\n                                <div onChange={ this.changeHandeler } className=\"form-check\">\r\n                                    <input type=\"radio\" name=\"gender\" id=\"gender1\" value=\"Male\"/>\r\n                                    <label htmlFor=\"gender1\"> Male </label>\r\n                                </div>\r\n                                <div onChange={ this.changeHandeler } className=\"form-check\">\r\n                                    <input type=\"radio\" name=\"gender\" id=\"gender2\" value=\"Female\"/>\r\n                                    <label htmlFor=\"gender2\"> Female </label>\r\n                                </div>\r\n                                <div onChange={ this.changeHandeler } className=\"form-check\">\r\n                                    <input type=\"radio\" name=\"gender\" id=\"gender3\" value=\"Other\"/>\r\n                                    <label htmlFor=\"gender3\"> Other </label>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-sm-3\">\r\n                            <div className=\"form-group\">\r\n                                <h6>Skills -</h6>\r\n                                <div onChange={ this.changeHandeler } className=\"form-check\">\r\n                                    <input type=\"checkbox\" name=\"skills\" id=\"skills\" value=\"Javascript\"/>\r\n                                    <label htmlFor=\"skills\"> Javascript </label>\r\n                                </div>\r\n                                <div onChange={ this.changeHandeler } className=\"form-check\">\r\n                                    <input type=\"checkbox\" name=\"skills\" id=\"skills1\" value=\"React JS\"/>\r\n                                    <label htmlFor=\"skills1\"> React JS </label>\r\n                                </div>\r\n                                <div onChange={ this.changeHandeler } className=\"form-check\">\r\n                                    <input type=\"checkbox\" name=\"skills\" id=\"skills2\" value=\"Angular JS\"/>\r\n                                    <label htmlFor=\"skills2\"> Angular JS </label>\r\n                                </div>\r\n                                <div onChange={ this.changeHandeler } className=\"form-check\">\r\n                                    <input type=\"checkbox\" name=\"skills\" id=\"skills3\" value=\"NodeJS\"/>\r\n                                    <label htmlFor=\"skills3\"> NodeJS </label>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                <button className=\"btn btn-primary\" type=\"submit\"> Submit </button>\r\n            </form> \r\n            \r\n                \r\n\r\n        )\r\n    }\r\n}\r\nexport default ContactForm\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport ContactForm from './components/contactForm/ContactForm'\n\nclass App extends Component {\n\n  \n  render(){\n    return(\n      <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-sm-8 offset-sm-2\">\n              <h1>Get touch -</h1>\n              <ContactForm />\n            </div>\n          </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}